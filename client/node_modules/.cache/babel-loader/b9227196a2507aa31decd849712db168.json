{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\SkrallGames\\\\client\\\\src\\\\pages\\\\skrallgaming\\\\createThornament.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; //import { Radar } from \"react-chartjs-2\";\n\nimport usePlayers from \"../../hooks/skrallgaming/usePlayers\";\nimport playersArray from \"../../globals/skrallgaming/players\"; //import placings from \"../../globals/skrallgaming/placings\"\n\nimport \"../../assets/style/skrallgaming/createThornament.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreateThornament() {\n  _s();\n\n  const {\n    players,\n    setPlayers\n  } = usePlayers();\n  const [teams, setTeams] = useState([{\n    name: \"Fizzle My Nizzle\",\n    players: [\"Mikka\", \"Mangz\"]\n  }, {\n    name: \"Damöb\",\n    players: [\"Izizaki\", \"Frudrunq\"]\n  }, {\n    name: \"Team Moskva\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Feta pattar och hawaii pizza\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Bratwurst med lis\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"B-Boyz\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Det står still\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Oklart\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Sneakers Sluts\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Holk & Kir\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"1Fizzle My Nizzle\",\n    players: [\"Mikka\", \"Mangz\"]\n  }, {\n    name: \"1Damöb\",\n    players: [\"Izizaki\", \"Frudrunq\"]\n  }, {\n    name: \"1Team Moskva\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"1Feta pattar och hawaii pizza\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"1Bratwurst med lis\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"1B-Boyz\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"1Det står still\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"1Oklart\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"1Sneakers Sluts\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"1Holk & Kir\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"2Fizzle My Nizzle\",\n    players: [\"Mikka\", \"Mangz\"]\n  }, {\n    name: \"2Damöb\",\n    players: [\"Izizaki\", \"Frudrunq\"]\n  }, {\n    name: \"2Team Moskva\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"2Feta pattar och hawaii pizza\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"2Bratwurst med lis\",\n    players: [\"a\", \"b\"]\n  }]);\n  const navigate = useNavigate();\n  const tournamentName = useRef();\n  const gameFormat = useRef();\n  const game = useRef('smash');\n  const [groupStage, setGroupStage] = useState(false);\n  const groupMaxTeams = useRef();\n  const groupAdvance = useRef();\n  const eliminitationType = useRef();\n  const teamName = useRef();\n  const p1 = useRef();\n  const p2 = useRef();\n  useState(() => {\n    if (!(players !== null && players !== void 0 && players.lenght)) setPlayers(playersArray);\n  }, []);\n\n  const registerTeam = () => {\n    if (!p1.current.value || !p2.current.value || !teamName.current.value) return;\n    let arr = [...[], ...teams];\n    arr.push({\n      name: teamName.current.value,\n      players: [p1.current.value, p2.current.value]\n    });\n    setTeams(arr);\n    teamName.current.select();\n  };\n\n  const removeTeam = i => {\n    let arr = [...[], ...teams];\n    arr.splice(i, 1);\n    setTeams(arr);\n  };\n\n  const startThornament = () => {\n    var _groupAdvance$current;\n\n    console.clear();\n    if (!teams) return alert(\"Register teams first!\");\n    let matches = [];\n    let uBracketMatches_C = teams.length - 1;\n    let uBracketTeams_C = teams.length;\n    let groups = []; //Create all group matches\n\n    if (groupStage) {\n      groups = Array(Math.ceil(teams.length / groupMaxTeams.current.value));\n      let groupId = 0;\n\n      for (let i = 0; i < teams.length; i++) {\n        var _groups;\n\n        if (!groups[groupId]) groups[groupId] = [];\n        groups[groupId] = [...((_groups = groups) === null || _groups === void 0 ? void 0 : _groups[groupId]), teams[i]];\n        groupId++;\n        if (groupId === groups.length) groupId = 0;\n      }\n\n      console.log(\"Groups:\", groups);\n      groups.map((group, i) => {\n        group.map((_, j) => {\n          for (let k = j + 1; k < group.length; k++) {\n            matches.push({\n              \"group\": i,\n              \"winner\": undefined,\n              \"name\": \"Pool\",\n              \"bo\": 2,\n              \"gameResults\": [undefined, undefined],\n              \"team1\": group[j].name,\n              \"team2\": group[k].name\n            });\n          }\n        });\n      });\n      debugger; //Rearrange so one Group does not finish first\n\n      {\n        let max = matches.indexOf(m => {\n          console.log(m);\n          /*; m.group > 0; return 2*/\n        });\n        console.log(max);\n        debugger;\n        let res = [];\n\n        for (let i = 1; i < max; i++) {\n          // Loop through all group 1 matches except first\n          let pointer = (i - 1) * groups.length;\n          res.push(matches.splice(0, 1));\n\n          for (let j = 1; j < groups.length - 1; j++) {\n            // loop for all groups except first\n            const ind = matches.indexOf(m => m.group === j);\n            res.push(matches.splice(ind, 1));\n          }\n        }\n\n        console.log(res, matches);\n        debugger;\n        matches = res;\n      }\n      uBracketTeams_C = groupAdvance.current.value * groups.length;\n      uBracketMatches_C = uBracketTeams_C - 1;\n    } //get array of matches per round\n\n\n    const getRounds = int => {\n      if (typeof int !== \"number\") return;\n      let i = 0;\n      let ret = [];\n\n      while (int > 0) {\n        let rm = Math.pow(2, i);\n        if (int >= rm) ret.unshift(rm);else ret.unshift(int);\n        int -= rm;\n        i++;\n      }\n\n      return ret;\n    }; //get opposite opponent if id\n\n\n    const getGroupStageOpponentsForPlayOff = (round0, restMatches) => {\n      if (!groupStage) throw new Error(\"Cannot execute getGroupStageOpponentsForPlayOff if groupStage === 0\");\n      let round1Matches = [];\n      let round0Matches = []; // An array were index corresponds to a group, and the indexarray corrensponds to the standings.\n\n      let opponents = Array.from({\n        length: groups.length\n      }, () => Array.from({\n        length: groupAdvance.current.value\n      }, (_, i) => i + 1)); // Insert round0 and round1 matches.\n\n      {\n        let i = 0;\n        const max = [...[].concat(...opponents)].length; // all matches\n\n        while (i < max) {\n          for (let j = 0; j < groups.length; j++) {\n            if (i >= restMatches.length) {\n              round0Matches.push({\n                t1: {\n                  group: j,\n                  placement: opponents[j][0]\n                }\n              });\n            } else {\n              round1Matches.push({\n                t1: {\n                  group: j,\n                  placement: opponents[j][0]\n                }\n              });\n            }\n\n            opponents[j].shift();\n            i++;\n            if (i >= max) break;\n          }\n        }\n      } // Rearrenge round 1 so all the best wont be in the upper part of the bracket...\n\n      for (let i = 0; i < Math.floor(round1Matches.length / 2); i++) {\n        if (i % 2 === 0) continue;\n        let d = 1;\n        if (round1Matches[round1Matches.length - 1].t1.group === round1Matches[i].t1.group) d = 2;\n        const elem = round1Matches.splice(round1Matches.length - d, 1)[0];\n        round1Matches.splice(i, 0, elem);\n      } // Group Round 0 to matches\n\n\n      for (let i = 0; i < round0; i++) {\n        let t2;\n        if (round0Matches[i].t1.group !== round0Matches[round0Matches.length - 1].t1.group) t2 = round0Matches.pop().t1;else t2 = round0Matches.splice(round0Matches.length - 2, 1)[0].t1;\n        round0Matches[i].t2 = t2;\n      } // Rearrenge round 0 so all the best wont be in the upper part of the bracket...\n\n\n      {\n        let d = 0;\n\n        for (let i = 1; i < Math.floor(round0Matches.length / 2) - 1; i++) {\n          const elem = round0Matches.splice(i, 1)[0];\n          round0Matches.splice(round0Matches.length - d, 0, elem);\n          d += 2;\n        }\n      }\n      return [...round1Matches, ...round0Matches];\n    }; //Get an array of positions of round 2 that are already placed\n\n\n    const getRestMatches = (arr, restMatches, rounds) => {\n      let r = [];\n      if (arr === null) arr = Array.from({\n        length: rounds\n      }, (_, i) => i);\n      if (restMatches === 0) return [];\n      let arr2 = arr.splice(arr.length / 2);\n      r.push(arr2.shift());\n      restMatches--;\n      if (restMatches > 0) r = [...r, ...getRestMatches(arr, Math.ceil(restMatches / 2))];\n      if (restMatches > 0) r = [...r, ...getRestMatches(arr2, Math.floor(restMatches / 2))];\n      return r.sort((a, b) => a - b);\n    };\n\n    function* nextTeam_Generator() {\n      let i = -1;\n\n      while (true) {\n        var _teams$i;\n\n        i++;\n        yield teams === null || teams === void 0 ? void 0 : (_teams$i = teams[i]) === null || _teams$i === void 0 ? void 0 : _teams$i.name;\n      }\n    }\n\n    const nextTeam = nextTeam_Generator();\n    let rounds = getRounds(uBracketMatches_C);\n    let restMatches = getRestMatches(null, uBracketTeams_C - rounds[0] * 2, rounds[1]);\n    let toLinks;\n\n    const getNextToLink = () => {\n      let i = toLinks.findIndex(l => l < 2);\n      if (i < 0) throw Error('Oh uh, update ToLinks before fetching new!');\n      toLinks[i]++;\n      return i;\n    };\n\n    const updateToLinks = i => {\n      toLinks = new Array(rounds[i + 1]);\n      toLinks.fill(0);\n\n      if (i === 0) {\n        for (let i = 0; i < restMatches.length; i++) {\n          var _toLinks$v;\n\n          let v = restMatches[i];\n          toLinks[v] = ((_toLinks$v = toLinks[v]) !== null && _toLinks$v !== void 0 ? _toLinks$v : 0) + 1;\n        }\n\n        return;\n      }\n    };\n\n    console.log(`Teams in playoff: ${uBracketTeams_C}`);\n    console.log(`Total playoff matches: ${uBracketMatches_C}`);\n    console.log(\"Playoff Rounds: \", rounds);\n    console.log(\"restMatches: \", restMatches);\n    let op;\n    if (groupStage) op = getGroupStageOpponentsForPlayOff(rounds[0], restMatches);\n    let upperBracket = [];\n    let groupId = groups.length;\n    let advanceId = groupAdvance === null || groupAdvance === void 0 ? void 0 : (_groupAdvance$current = groupAdvance.current) === null || _groupAdvance$current === void 0 ? void 0 : _groupAdvance$current.value;\n    let matchCount = 0; //Create the upper bracket\n\n    /*\r\n        Lower bracket skall insertas hälften så många nerifrån och upp.\r\n        Dvs första matchen blir loser of 1 & 2 andra 3 & 4.\r\n        Sen på runda 2 däremot (jämna) så vändar man på ordningen.\r\n    */\n\n    rounds.map((r, i) => {\n      upperBracket.push([]);\n      updateToLinks(i);\n\n      for (let j = 0; j < r; j++) {\n        matchCount++;\n        let toLink;\n\n        try {\n          toLink = getNextToLink();\n        } catch (e) {\n          console.log(toLinks, i, j);\n          throw e;\n        }\n\n        let t1;\n        let t2; // Först rundan är bara att kötta på\n\n        if (i === 0) {\n          if (groupStage) {\n            let t = op.pop();\n            t1 = t.t1; //{group: groupId, placement: advanceId}\n\n            t2 = t.t2; //{group: getOpponent(groupId, \"group\"), placement: getOpponent(advanceId, \"placement\")}\n          } else {\n            t1 = nextTeam.next().value;\n            t2 = nextTeam.next().value;\n          }\n        } // Runda två så gäller det att det är lag kvar, OCH att den finns i RestMatches-tabellen\n        else if (i === 1 && uBracketTeams_C > 0 && restMatches.includes(j)) {\n          let pre = upperBracket[0].findIndex(m => m.toLink === j);\n\n          if (groupStage) {\n            let t = op.pop();\n            t1 = t.t1; //{group: groupId, placement: advanceId}\n\n            if (pre === -1) t2 = t.t2; //{group: getOpponent(groupId, \"group\"), placement: getOpponent(advanceId, \"placement\")}\n            else t2 = `∀Winner of match ${upperBracket[0][pre].match}`;\n          } else {\n            t1 = nextTeam.next().value;\n            if (pre === -1) t2 = nextTeam.next().value;else t2 = `∀Winner of match ${upperBracket[0][pre].match}`;\n          }\n        } else {\n          var _upperBracket$pre$mat, _upperBracket$pre, _upperBracket$pre$mat2, _upperBracket$pre2;\n\n          let pre = upperBracket[i - 1].findIndex(m => m.toLink === j);\n          t1 = `∀Winner of match ${(_upperBracket$pre$mat = (_upperBracket$pre = upperBracket[i - 1][pre]) === null || _upperBracket$pre === void 0 ? void 0 : _upperBracket$pre.match) !== null && _upperBracket$pre$mat !== void 0 ? _upperBracket$pre$mat : \"WTF\"}`;\n          pre = upperBracket[i - 1].findIndex((m, ii) => m.toLink === j && ii !== pre);\n          t2 = `∀Winner of match ${(_upperBracket$pre$mat2 = (_upperBracket$pre2 = upperBracket[i - 1][pre]) === null || _upperBracket$pre2 === void 0 ? void 0 : _upperBracket$pre2.match) !== null && _upperBracket$pre$mat2 !== void 0 ? _upperBracket$pre$mat2 : \"WTF\"}`;\n        }\n\n        if (i === 0 || i === 1 && uBracketTeams_C > 0 && restMatches.includes(j)) {\n          groupId -= 1;\n          advanceId -= 1;\n          uBracketTeams_C -= i + Math.abs(2 * (i - 1));\n          if (advanceId === 0) advanceId += groups.length;\n          if (groupId === 0) groupId += groups.length;\n        }\n\n        upperBracket[i].push({\n          \"name\": \"Match \" + matchCount,\n          \"bo\": 3,\n          \"gameResults\": [undefined, undefined, undefined],\n          \"winner\": undefined,\n          \"team1\": t1,\n          \"team2\": t2,\n          \"round\": i,\n          \"roundId\": j,\n          \"match\": matchCount,\n          \"toLink\": toLink\n        });\n        uBracketMatches_C--;\n      }\n    });\n    console.log(\"upperBracket:\", upperBracket);\n    console.log(\"matches:\", matches);\n    let lowerBracket = []; // Loser's Bracket\n\n    if (eliminitationType === 2) {\n      lowerBracket.push([]);\n      rounds.map((r, i) => {\n        for (let j = 0; j < r / 2; j++) {\n          matchCount++;\n          lowerBracket[i].push({\n            \"name\": \"Match \" + matchCount,\n            \"bo\": 3,\n            \"gameResults\": [undefined, undefined, undefined],\n            \"winner\": undefined,\n            \"team1\": {\n              match: j\n            },\n            \"team2\": {\n              match: j + 1\n            },\n            \"round\": i,\n            \"roundId\": j,\n            \"match\": matchCount,\n            \"fromLink\": undefined\n          });\n        }\n      });\n    }\n\n    navigate(\"/skrallgaming/ThornamentBracket\", {\n      state: {\n        groups,\n        upperBracket,\n        teams,\n        groupMatches: matches\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CreateThornamentBody\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"part\",\n            children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n              children: \"Tournament Info\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"tournamentName\",\n                required: true,\n                ref: tournamentName,\n                defaultValue: 'SSE-II 2022 Smash Doubles'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Tournament Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"gameFormat\",\n                ref: gameFormat,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"1v1\",\n                  children: \"1v1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"2v2\",\n                  children: \"2v2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Game Format\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"game\",\n                ref: game,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"smash\",\n                  children: \"Smash Ultimate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"beerPong\",\n                  children: \"Beerpong\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Game\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: \"groupStage\",\n                checked: groupStage,\n                onChange: () => setGroupStage(!groupStage)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"groupStage\",\n                children: \"Groupstage?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 25\n            }, this), groupStage && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"inputBox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  id: \"maxTeamsPerGrp\",\n                  defaultValue: 4,\n                  ref: groupMaxTeams\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Max teams per group\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 420,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"inputBox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  id: \"advance\",\n                  defaultValue: 2,\n                  ref: groupAdvance,\n                  min: 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 423,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Teams advance from each group\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                required: true,\n                id: \"eliminitationType\",\n                ref: eliminitationType,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: 1,\n                  children: \"Single Elimination\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: 2,\n                  children: \"Double Elimination\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 430,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Elimination type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: \"eloStructure\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"eloStructure\",\n                children: \"Structure by Elo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"part\",\n            children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n              children: \"Team Registration\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"p1\",\n                defaultValue: \"\",\n                ref: p1,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  disabled: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 33\n                }, this), players && players.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p === null || p === void 0 ? void 0 : p.name,\n                  children: p === null || p === void 0 ? void 0 : p.name\n                }, \"1\" + (p === null || p === void 0 ? void 0 : p.name), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 449,\n                  columnNumber: 54\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Player 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"p2\",\n                defaultValue: \"\",\n                ref: p2,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  disabled: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 33\n                }, this), players && players.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p === null || p === void 0 ? void 0 : p.name,\n                  children: p === null || p === void 0 ? void 0 : p.name\n                }, \"2\" + (p === null || p === void 0 ? void 0 : p.name), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 458,\n                  columnNumber: 54\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Player 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"teamName\",\n                required: true,\n                ref: teamName,\n                onKeyDown: k => {\n                  if (k.key === \"Enter\") registerTeam();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 464,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Team name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 468,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => registerTeam(),\n              children: \"Register Team\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n              children: \"Registered Teams\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"registeredTeams\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 478,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Team\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 479,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Players\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 480,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 477,\n                  columnNumber: 36\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: teams && teams.map((t, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: i + 1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 485,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: t.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 486,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: t.players.join(' & ')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 487,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      onClick: () => removeTeam(i),\n                      children: \"\\u274C\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 488,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 488,\n                    columnNumber: 41\n                  }, this)]\n                }, t.name, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 484,\n                  columnNumber: 57\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 13\n      }, this), teams && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"finishButton\",\n        onClick: () => startThornament(),\n        children: \"Hold to start Thornament\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(CreateThornament, \"p9nrOrGWLj7YhR9prb80sPQRnI4=\", false, function () {\n  return [usePlayers, useNavigate];\n});\n\n_c = CreateThornament;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateThornament\");","map":{"version":3,"names":["React","useState","useRef","useNavigate","usePlayers","playersArray","CreateThornament","players","setPlayers","teams","setTeams","name","navigate","tournamentName","gameFormat","game","groupStage","setGroupStage","groupMaxTeams","groupAdvance","eliminitationType","teamName","p1","p2","lenght","registerTeam","current","value","arr","push","select","removeTeam","i","splice","startThornament","console","clear","alert","matches","uBracketMatches_C","length","uBracketTeams_C","groups","Array","Math","ceil","groupId","log","map","group","_","j","k","undefined","max","indexOf","m","res","pointer","ind","getRounds","int","ret","rm","pow","unshift","getGroupStageOpponentsForPlayOff","round0","restMatches","Error","round1Matches","round0Matches","opponents","from","concat","t1","placement","shift","floor","d","elem","t2","pop","getRestMatches","rounds","r","arr2","sort","a","b","nextTeam_Generator","nextTeam","toLinks","getNextToLink","findIndex","l","updateToLinks","fill","v","op","upperBracket","advanceId","matchCount","toLink","e","t","next","includes","pre","match","ii","abs","lowerBracket","state","groupMatches","p","key","join"],"sources":["C:/Git/SkrallGames/client/src/pages/skrallgaming/createThornament.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n//import { Radar } from \"react-chartjs-2\";\r\nimport usePlayers from \"../../hooks/skrallgaming/usePlayers\";\r\nimport playersArray from \"../../globals/skrallgaming/players\"\r\n//import placings from \"../../globals/skrallgaming/placings\"\r\nimport \"../../assets/style/skrallgaming/createThornament.css\"\r\n\r\nexport default function CreateThornament(){\r\n\r\n    const { players, setPlayers } = usePlayers()\r\n    const [ teams, setTeams ] = useState([\r\n        {name: \"Fizzle My Nizzle\", players: [\"Mikka\", \"Mangz\"]},\r\n        {name: \"Damöb\", players: [\"Izizaki\", \"Frudrunq\"]},\r\n        {name: \"Team Moskva\", players: [\"a\", \"b\"]},\r\n        {name: \"Feta pattar och hawaii pizza\", players: [\"a\", \"b\"]},\r\n        {name: \"Bratwurst med lis\", players: [\"a\", \"b\"]},\r\n        {name: \"B-Boyz\", players: [\"a\", \"b\"]},\r\n        {name: \"Det står still\", players: [\"a\", \"b\"]},\r\n        {name: \"Oklart\", players: [\"a\", \"b\"]},\r\n        {name: \"Sneakers Sluts\", players: [\"a\", \"b\"]},\r\n        {name: \"Holk & Kir\", players: [\"a\", \"b\"]},\r\n        {name: \"1Fizzle My Nizzle\", players: [\"Mikka\", \"Mangz\"]},\r\n        {name: \"1Damöb\", players: [\"Izizaki\", \"Frudrunq\"]},\r\n        {name: \"1Team Moskva\", players: [\"a\", \"b\"]},\r\n        {name: \"1Feta pattar och hawaii pizza\", players: [\"a\", \"b\"]},\r\n        {name: \"1Bratwurst med lis\", players: [\"a\", \"b\"]},\r\n        {name: \"1B-Boyz\", players: [\"a\", \"b\"]},\r\n        {name: \"1Det står still\", players: [\"a\", \"b\"]},\r\n        {name: \"1Oklart\", players: [\"a\", \"b\"]},\r\n        {name: \"1Sneakers Sluts\", players: [\"a\", \"b\"]},\r\n        {name: \"1Holk & Kir\", players: [\"a\", \"b\"]},\r\n        {name: \"2Fizzle My Nizzle\", players: [\"Mikka\", \"Mangz\"]},\r\n        {name: \"2Damöb\", players: [\"Izizaki\", \"Frudrunq\"]},\r\n        {name: \"2Team Moskva\", players: [\"a\", \"b\"]},\r\n        {name: \"2Feta pattar och hawaii pizza\", players: [\"a\", \"b\"]},\r\n        {name: \"2Bratwurst med lis\", players: [\"a\", \"b\"]}\r\n    ])\r\n    const navigate = useNavigate();\r\n\r\n    const tournamentName = useRef()\r\n    const gameFormat = useRef()\r\n    const game = useRef('smash')\r\n\r\n    const [ groupStage, setGroupStage ] = useState(false)\r\n    const groupMaxTeams  = useRef()\r\n    const groupAdvance = useRef()\r\n\r\n    const eliminitationType = useRef()\r\n\r\n    const teamName = useRef()\r\n    const p1 = useRef()\r\n    const p2 = useRef()\r\n\r\n    useState(() => {if (!players?.lenght) setPlayers(playersArray)}, [])\r\n\r\n    const registerTeam = () =>{\r\n        if (!p1.current.value || !p2.current.value || !teamName.current.value) return\r\n        let arr = [...[], ...teams]\r\n        arr.push({\r\n            name: teamName.current.value,\r\n            players: [p1.current.value, p2.current.value]\r\n        })\r\n        setTeams(arr);\r\n        teamName.current.select();\r\n    }\r\n\r\n    const removeTeam = (i) => {\r\n        let arr = [...[], ...teams]\r\n        arr.splice(i, 1)\r\n        setTeams(arr)\r\n    }    \r\n\r\n    const startThornament = () => {\r\n        console.clear()\r\n        if (!teams) return alert(\"Register teams first!\")\r\n        let matches = []\r\n        let uBracketMatches_C = (teams.length - 1)\r\n        let uBracketTeams_C = teams.length;\r\n        let groups = []\r\n\r\n        //Create all group matches\r\n        if (groupStage){\r\n            groups = Array(Math.ceil(teams.length / groupMaxTeams.current.value))\r\n            let groupId = 0\r\n            for (let i = 0; i < teams.length; i++){\r\n                if (!groups[groupId]) groups[groupId] = []\r\n                groups[groupId] = [...groups?.[groupId], teams[i]]\r\n                groupId++\r\n                if (groupId === groups.length) groupId = 0\r\n            }\r\n            console.log(\"Groups:\", groups)\r\n\r\n            groups.map((group, i) => {\r\n                group.map((_, j) => {\r\n                    for(let k = j+1; k < group.length; k++){\r\n                        matches.push({\r\n                            \"group\": i,\r\n                            \"winner\": undefined,\r\n                            \"name\": \"Pool\",\r\n                            \"bo\": 2,\r\n                            \"gameResults\": [undefined, undefined],\r\n                            \"team1\": group[j].name,\r\n                            \"team2\": group[k].name,\r\n                        })\r\n                    }\r\n                })                \r\n            })\r\n            debugger;\r\n            //Rearrange so one Group does not finish first\r\n            {\r\n                let max = matches.indexOf(m => {console.log(m)/*; m.group > 0; return 2*/})\r\n                console.log(max)\r\n                debugger;\r\n                let res = [];\r\n                for(let i = 1; i < max; i++){ // Loop through all group 1 matches except first\r\n                    let pointer = (i - 1) * groups.length;\r\n                    res.push(matches.splice(0, 1))\r\n                    for(let j = 1; j < groups.length - 1; j++){ // loop for all groups except first\r\n                        const ind = matches.indexOf(m => m.group === j)\r\n                        res.push(matches.splice(ind, 1))\r\n                    }\r\n                }\r\n                console.log(res, matches)\r\n                debugger;\r\n                matches = res\r\n            }\r\n            \r\n\r\n            uBracketTeams_C = (groupAdvance.current.value * groups.length)\r\n            uBracketMatches_C = uBracketTeams_C - 1\r\n        }\r\n\r\n        //get array of matches per round\r\n        const getRounds = (int) => {            \r\n            if (typeof int !== \"number\") return\r\n            let i = 0\r\n            let ret = [];\r\n            \r\n            while (int > 0){\r\n                let rm = Math.pow(2, i)\r\n                if (int >= rm) ret.unshift(rm)\r\n                else ret.unshift(int)\r\n                int -= rm\r\n                i++                \r\n            }\r\n\r\n            return ret\r\n        }\r\n        \r\n        //get opposite opponent if id\r\n        const getGroupStageOpponentsForPlayOff = (round0, restMatches) => {\r\n            if (!groupStage) throw new Error(\"Cannot execute getGroupStageOpponentsForPlayOff if groupStage === 0\")\r\n            let round1Matches = [];\r\n            let round0Matches = [];\r\n\r\n            // An array were index corresponds to a group, and the indexarray corrensponds to the standings.\r\n            let opponents = Array.from({length:groups.length}, () => Array.from({length: groupAdvance.current.value}, (_, i) => i + 1))\r\n            \r\n            // Insert round0 and round1 matches.\r\n            {\r\n                let i = 0\r\n                const max = [...[].concat(...opponents)].length// all matches\r\n                while (i < max){\r\n                    for(let j = 0; j < groups.length; j++){\r\n                        if (i >= restMatches.length){\r\n                            round0Matches.push({t1:{group: j, placement: opponents[j][0]}})\r\n                        }else{\r\n                            round1Matches.push({t1:{group: j, placement: opponents[j][0]}});\r\n                        }                        \r\n                        opponents[j].shift()\r\n                        i++\r\n                        if (i >= max) break;       \r\n                    }\r\n                }\r\n            }\r\n\r\n            // Rearrenge round 1 so all the best wont be in the upper part of the bracket...\r\n            for (let i = 0; i < Math.floor(round1Matches.length / 2); i++){\r\n                if (i % 2 === 0) continue;\r\n                let d = 1;\r\n                if (round1Matches[round1Matches.length - 1].t1.group === round1Matches[i].t1.group) d = 2\r\n                const elem = round1Matches.splice(round1Matches.length-d, 1)[0]\r\n                round1Matches.splice(i, 0, elem)\r\n            }\r\n\r\n            // Group Round 0 to matches\r\n            for (let i = 0; i < round0; i++){\r\n                let t2;\r\n                if (round0Matches[i].t1.group !== round0Matches[round0Matches.length - 1].t1.group)\r\n                    t2 = round0Matches.pop().t1;\r\n                else\r\n                    t2 = round0Matches.splice(round0Matches.length - 2, 1)[0].t1                      \r\n\r\n                round0Matches[i].t2 = t2;\r\n            }\r\n            // Rearrenge round 0 so all the best wont be in the upper part of the bracket...\r\n            {\r\n                let d = 0\r\n                for (let i = 1; i < Math.floor(round0Matches.length / 2) - 1; i++){\r\n                    const elem = round0Matches.splice(i, 1)[0]\r\n                    round0Matches.splice(round0Matches.length - d, 0, elem)\r\n                    d += 2;\r\n                }\r\n            }            \r\n            return [...round1Matches, ...round0Matches]\r\n        }   \r\n\r\n        //Get an array of positions of round 2 that are already placed\r\n        const getRestMatches = (arr, restMatches, rounds) => {            \r\n            let r = [];\r\n            \r\n            if (arr === null) arr = Array.from({length: rounds}, (_, i) => i)\r\n            if (restMatches === 0) return []\r\n\r\n            let arr2 = arr.splice(arr.length / 2)\r\n            r.push(arr2.shift())\r\n            restMatches--\r\n\r\n            if(restMatches > 0)\r\n                r = [...r, ...getRestMatches(arr, Math.ceil(restMatches/2))]\r\n\r\n            if(restMatches > 0)\r\n                r = [...r, ...getRestMatches(arr2, Math.floor(restMatches/2))]\r\n\r\n            return r.sort((a, b) => a - b);\r\n        }\r\n\r\n        function* nextTeam_Generator(){\r\n            let i = -1            \r\n            while(true){\r\n                i++\r\n                yield teams?.[i]?.name\r\n            }            \r\n        }\r\n\r\n        const nextTeam = nextTeam_Generator()\r\n\r\n        let rounds = getRounds(uBracketMatches_C)                \r\n        let restMatches = getRestMatches(null, uBracketTeams_C - rounds[0]*2, rounds[1])\r\n        let toLinks;\r\n        const getNextToLink = () => {\r\n            let i = toLinks.findIndex(l => l < 2)\r\n            if(i < 0) throw Error('Oh uh, update ToLinks before fetching new!')\r\n            toLinks[i]++\r\n            return i;\r\n        }\r\n        const updateToLinks = (i) => {\r\n            toLinks = new Array(rounds[i+1])\r\n            toLinks.fill(0);\r\n            if (i === 0){                \r\n                for (let i = 0; i < restMatches.length; i++){\r\n                    let v = restMatches[i]\r\n                    toLinks[v] = (toLinks[v] ?? 0) + 1;\r\n                }\r\n                return\r\n            }            \r\n        }\r\n\r\n        console.log(`Teams in playoff: ${uBracketTeams_C}`)\r\n        console.log(`Total playoff matches: ${uBracketMatches_C}`)\r\n        console.log(\"Playoff Rounds: \", rounds)\r\n        console.log(\"restMatches: \", restMatches)\r\n\r\n        let op;\r\n        if(groupStage) op = getGroupStageOpponentsForPlayOff(rounds[0], restMatches); \r\n        \r\n        let upperBracket = []\r\n        let groupId = groups.length\r\n        let advanceId = groupAdvance?.current?.value\r\n        let matchCount = 0;\r\n        //Create the upper bracket\r\n        /*\r\n            Lower bracket skall insertas hälften så många nerifrån och upp.\r\n            Dvs första matchen blir loser of 1 & 2 andra 3 & 4.\r\n            Sen på runda 2 däremot (jämna) så vändar man på ordningen.\r\n        */\r\n        rounds.map((r, i) => {\r\n            upperBracket.push([])\r\n            updateToLinks(i);\r\n            \r\n            for(let j = 0; j < r; j++){\r\n                matchCount++\r\n                let toLink\r\n                try{\r\n                    toLink = getNextToLink()\r\n                }catch(e){\r\n                    console.log(toLinks, i, j)\r\n                    throw e;\r\n                }\r\n                let t1\r\n                let t2;\r\n                // Först rundan är bara att kötta på\r\n                if(i === 0){                    \r\n                    if (groupStage){\r\n                        let t = op.pop();                        \r\n                        t1 = t.t1//{group: groupId, placement: advanceId}\r\n                        t2 = t.t2//{group: getOpponent(groupId, \"group\"), placement: getOpponent(advanceId, \"placement\")}\r\n                    }else{\r\n                        t1 = nextTeam.next().value\r\n                        t2 = nextTeam.next().value\r\n                    }\r\n                }                                           \r\n\r\n                // Runda två så gäller det att det är lag kvar, OCH att den finns i RestMatches-tabellen\r\n                else if (i === 1 && uBracketTeams_C > 0 && restMatches.includes(j)){\r\n                    let pre = upperBracket[0].findIndex(m => m.toLink === j)\r\n                    if (groupStage){\r\n                        let t = op.pop();\r\n                        t1 = t.t1//{group: groupId, placement: advanceId}\r\n                        if (pre === -1) t2 = t.t2//{group: getOpponent(groupId, \"group\"), placement: getOpponent(advanceId, \"placement\")}\r\n                        else t2 = `∀Winner of match ${upperBracket[0][pre].match}`\r\n                    }else{\r\n                        t1 = nextTeam.next().value\r\n                        if (pre === -1) t2 = nextTeam.next().value\r\n                        else t2 = `∀Winner of match ${upperBracket[0][pre].match}`\r\n                    }\r\n                }\r\n                \r\n                else{\r\n                    let pre = upperBracket[i-1].findIndex(m => m.toLink === j)\r\n                    t1 = `∀Winner of match ${upperBracket[i-1][pre]?.match ?? \"WTF\"}`\r\n                    pre = upperBracket[i-1].findIndex((m, ii) => m.toLink === j && ii !== pre)\r\n                    t2 = `∀Winner of match ${upperBracket[i-1][pre]?.match ?? \"WTF\"}`\r\n                }\r\n                \r\n                if (i === 0 || (i === 1 && uBracketTeams_C > 0 && restMatches.includes(j))){\r\n                    groupId -= 1\r\n                    advanceId -= 1\r\n                    uBracketTeams_C -= i + Math.abs(2*(i-1));\r\n                    if (advanceId === 0) advanceId += groups.length\r\n                    if (groupId === 0) groupId += groups.length\r\n                }\r\n\r\n                upperBracket[i].push({\r\n                    \"name\": \"Match \" + matchCount,\r\n                    \"bo\": 3,\r\n                    \"gameResults\": [undefined, undefined, undefined],\r\n                    \"winner\": undefined,\r\n                    \"team1\": t1,\r\n                    \"team2\": t2,\r\n                    \"round\": i,\r\n                    \"roundId\": j,\r\n                    \"match\": matchCount,\r\n                    \"toLink\": toLink\r\n                })\r\n                uBracketMatches_C--;                \r\n            }\r\n        })\r\n        console.log(\"upperBracket:\", upperBracket)\r\n        console.log(\"matches:\", matches)\r\n\r\n\r\n        let lowerBracket = [];        \r\n        // Loser's Bracket\r\n        if (eliminitationType === 2){\r\n            lowerBracket.push([])\r\n            rounds.map((r, i) => {\r\n                for (let j = 0; j < r/2; j++){\r\n                    matchCount++\r\n                    lowerBracket[i].push({\r\n                        \"name\": \"Match \" + matchCount,\r\n                        \"bo\": 3,\r\n                        \"gameResults\": [undefined, undefined, undefined],\r\n                        \"winner\": undefined,\r\n                        \"team1\": {match: j},\r\n                        \"team2\": {match: j+1},\r\n                        \"round\": i,\r\n                        \"roundId\": j,\r\n                        \"match\": matchCount,\r\n                        \"fromLink\": undefined\r\n                    }) \r\n                }\r\n            })\r\n        }            \r\n\r\n        navigate(\"/skrallgaming/ThornamentBracket\", {state:{\r\n            groups,\r\n            upperBracket,\r\n            teams,\r\n            groupMatches: matches\r\n        }})\r\n    }\r\n\r\n    return <>        \r\n        <div className=\"CreateThornamentBody\">\r\n            <div>                \r\n                <span>\r\n                    <fieldset className=\"part\">\r\n                        <legend>Tournament Info</legend>\r\n                        <div className=\"inputBox\">\r\n                            <input id=\"tournamentName\" required \r\n                                ref={tournamentName} defaultValue={'SSE-II 2022 Smash Doubles'}\r\n                            /> \r\n                            <span>Tournament Name</span>\r\n                        </div>\r\n                        <div className=\"inputBox\">\r\n                            <select id=\"gameFormat\" ref={gameFormat}>\r\n                                <option value=\"1v1\">1v1</option>\r\n                                <option value=\"2v2\">2v2</option>\r\n                            </select>\r\n                            <span>Game Format</span>\r\n                        </div>\r\n                        <div className=\"inputBox\">\r\n                            <select id=\"game\" ref={game}>\r\n                                <option value=\"smash\">Smash Ultimate</option>\r\n                                <option value=\"beerPong\">Beerpong</option>\r\n                            </select>\r\n                            <span>Game</span>\r\n                        </div>                    \r\n                        <div>\r\n                            <input type=\"checkbox\" id=\"groupStage\" checked={groupStage}\r\n                                onChange={() => setGroupStage(!groupStage)}\r\n                            />\r\n                            <label htmlFor=\"groupStage\">Groupstage?</label>\r\n                        </div>                    \r\n                        {groupStage && <>\r\n                            <div className=\"inputBox\">\r\n                                <input type=\"number\" id=\"maxTeamsPerGrp\" defaultValue={4} ref={groupMaxTeams}/> \r\n                                <span>Max teams per group</span>\r\n                            </div>\r\n                            <div className=\"inputBox\">\r\n                                <input type=\"number\" id=\"advance\" defaultValue={2} \r\n                                    ref={groupAdvance} min={1} \r\n                                /> \r\n                                <span>Teams advance from each group</span>\r\n                            </div>\r\n                        </>} \r\n                        <div className=\"inputBox\">\r\n                            <select required id=\"eliminitationType\" ref={eliminitationType}>\r\n                                <option value={1}>Single Elimination</option>\r\n                                <option value={2}>Double Elimination</option>\r\n                            </select>\r\n                            <span>Elimination type</span>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"checkbox\" id=\"eloStructure\"/>\r\n                            <label htmlFor=\"eloStructure\">Structure by Elo</label>\r\n                        </div>                    \r\n                    </fieldset>\r\n                </span>\r\n                <span>\r\n                    <fieldset className=\"part\">\r\n                        <legend>Team Registration</legend>                                            \r\n                        <div className=\"inputBox\">\r\n                            <select id=\"p1\" defaultValue={\"\"} ref={p1}>\r\n                                <option value=\"\" disabled/>\r\n                                {players &&\r\n                                    players.map(p => <option key={\"1\"+p?.name} value={p?.name}>{p?.name}</option>)\r\n                                }\r\n                            </select>\r\n                            <span>Player 1</span>\r\n                        </div>\r\n                        <div className=\"inputBox\">\r\n                            <select id=\"p2\" defaultValue={\"\"} ref={p2}>\r\n                                <option value=\"\" disabled/>\r\n                                {players &&\r\n                                    players.map(p => <option key={\"2\"+p?.name} value={p?.name}>{p?.name}</option>)\r\n                                }\r\n                            </select>\r\n                            <span>Player 2</span>\r\n                        </div>\r\n                        <div className=\"inputBox\">\r\n                            <input id=\"teamName\" required \r\n                                ref={teamName}\r\n                                onKeyDown={(k) => {if(k.key === \"Enter\") registerTeam()}} \r\n                            /> \r\n                            <span>Team name</span>\r\n                        </div>\r\n                        <button onClick={() => registerTeam()}>Register Team</button>\r\n                    </fieldset>\r\n                </span>\r\n                <span>\r\n                    <fieldset>\r\n                        <legend>Registered Teams</legend>\r\n                        <table className=\"registeredTeams\">\r\n                            <thead><tr>\r\n                                <th></th>\r\n                                <th>Team</th>\r\n                                <th>Players</th>\r\n                            </tr></thead>\r\n                            <tbody>\r\n                                {teams &&\r\n                                    teams.map((t, i) => <tr key={t.name}>\r\n                                        <td>{i+1}</td>\r\n                                        <td>{t.name}</td>\r\n                                        <td>{t.players.join(' & ')}</td>\r\n                                        <td><i onClick={() => removeTeam(i)}>❌</i></td>\r\n                                    </tr>)\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </fieldset>\r\n                </span>\r\n            </div>            \r\n            {\r\n                teams &&\r\n                <div className=\"finishButton\" onClick={() => startThornament()}>Hold to start Thornament</div>\r\n            }\r\n        </div>    \r\n    </>\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}