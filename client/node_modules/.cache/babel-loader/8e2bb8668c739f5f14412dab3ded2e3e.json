{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\SkrallGames\\\\client\\\\src\\\\pages\\\\skrallgaming\\\\createThornament.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; //import { Radar } from \"react-chartjs-2\";\n\nimport usePlayers from \"../../hooks/skrallgaming/usePlayers\";\nimport playersArray from \"../../globals/skrallgaming/players\"; //import placings from \"../../globals/skrallgaming/placings\"\n\nimport \"../../assets/style/skrallgaming/createThornament.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreateThornament() {\n  _s();\n\n  const {\n    players,\n    setPlayers\n  } = usePlayers();\n  const [teams, setTeams] = useState([{\n    name: \"Fizzle My Nizzle\",\n    players: [\"Mikka\", \"Mangz\"]\n  }, {\n    name: \"Damöb\",\n    players: [\"Izizaki\", \"Frudrunq\"]\n  }, {\n    name: \"Team Moskva\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Feta pattar och hawaii pizza\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Bratwurst med lis\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"B-Boyz\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Det står still\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Oklart\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Sneakers Sluts\",\n    players: [\"a\", \"b\"]\n  }, {\n    name: \"Holk & Kir\",\n    players: [\"a\", \"b\"]\n  }]);\n  const navigate = useNavigate();\n  const tournamentName = useRef();\n  const gameFormat = useRef();\n  const game = useRef('smash');\n  const [groupStage, setGroupStage] = useState(false);\n  const groupMaxTeams = useRef();\n  const groupAdvance = useRef();\n  const eliminitationType = useRef();\n  const teamName = useRef();\n  const p1 = useRef();\n  const p2 = useRef();\n  useState(() => {\n    if (!(players !== null && players !== void 0 && players.lenght)) setPlayers(playersArray);\n  }, []);\n\n  const registerTeam = () => {\n    if (!p1.current.value || !p2.current.value || !teamName.current.value) return;\n    let arr = [...[], ...teams];\n    arr.push({\n      name: teamName.current.value,\n      players: [p1.current.value, p2.current.value]\n    });\n    setTeams(arr);\n    teamName.current.select();\n  };\n\n  const removeTeam = i => {\n    let arr = [...[], ...teams];\n    arr.splice(i, 1);\n    setTeams(arr);\n  };\n\n  const startThornament = () => {\n    var _groupAdvance$current;\n\n    console.clear();\n    if (!teams) return alert(\"Register teams first!\");\n    let matches = [];\n    let uBracketMatches_C = teams.length - 1;\n    let uBracketTeams_C = teams.length;\n    let groups = []; //Create all group matches\n\n    if (groupStage) {\n      groups = Array(Math.ceil(teams.length / groupMaxTeams.current.value));\n      let groupId = 0;\n\n      for (let i = 0; i < teams.length; i++) {\n        var _groups;\n\n        if (!groups[groupId]) groups[groupId] = [];\n        groups[groupId] = [...((_groups = groups) === null || _groups === void 0 ? void 0 : _groups[groupId]), teams[i]];\n        groupId++;\n        if (groupId === groups.length) groupId = 0;\n      }\n\n      console.log(\"Groups:\", groups);\n      groups.map((group, i) => {\n        group.map((team, j) => {\n          for (let k = j + 1; k < group.length; k++) {\n            matches.push({\n              \"group\": String.fromCharCode(65 + i),\n              \"winner\": undefined,\n              \"name\": \"Pool\",\n              \"bo\": 2,\n              \"gameResults\": [undefined, undefined],\n              \"team1\": group[j].name,\n              \"team2\": group[k].name\n            });\n          }\n        });\n      });\n      uBracketTeams_C = groupAdvance.current.value * groups.length;\n      uBracketMatches_C = uBracketTeams_C - 1;\n    } //get array of matches per round\n\n\n    const getRounds = int => {\n      if (typeof int !== \"number\") return;\n      let i = 0;\n      let ret = [];\n\n      while (int > 0) {\n        let rm = Math.pow(2, i);\n        if (int >= rm) ret.unshift(rm);else ret.unshift(int);\n        int -= rm;\n        i++;\n      }\n\n      return ret;\n    }; //get opposite opponent if id        \n\n\n    let op = [];\n    {\n      const adv = () => Array.from({\n        length: groupAdvance.current.value\n      }, (_, i) => i + 1);\n\n      let opponents = Array.from({\n        length: groups.length\n      }, adv); // opponents[0] = [...[], ...adv] //Annoying deep-copy shit\n      // opponents.fill(adv, 1)\n\n      let gl = groups.length;\n      let differ = groups.length / 2;\n      let breakPoint = {\n        cur: 0,\n        breaker: gl * groupAdvance.current.value\n      }; // if there is an uneven amount ov advanced players, one will have a free ride.\n\n      if (gl * groupAdvance.current.value % 2 === 1) {\n        op.push({\n          group: 0,\n          standing: 1\n        });\n        opponents[0].shift();\n        breakPoint.breaker--;\n      } // Break after half games\n\n\n      breakPoint.breaker /= 2;\n      let offset = op.length;\n\n      for (let i = groupAdvance.current.value; i > 0; i--) {\n        // 4th -> 3rd -> 2nd etc..\n        if (breakPoint.breaker === breakPoint.cur) break;\n\n        for (let j = 0; j < groups.length; j++) {\n          // All Groups\n          let pointer = (j + offset) % groups.length;\n          if (breakPoint.breaker === breakPoint.cur) break;\n          let group = pointer;\n          group += pointer > differ ? -Math.ceil(differ) : Math.floor(differ);\n          let m = {\n            t1: {\n              group: pointer,\n              standing: i\n            },\n            t2: {\n              group,\n              standing: opponents[group][0]\n            }\n          };\n          op.push(m);\n          opponents[group].shift();\n          breakPoint.cur++;\n        }\n      }\n\n      for (let i = groupAdvance.current.value; i > 0; i--) {\n        // Alla \"treor\" -> \"tvåor\" -> \"ettor\" etc\n        for (let j = 0; j < gl; j++) {\n          // Alla grupper\n          let th = {\n            t1: {\n              group: j,\n              standing: i\n            }\n          };\n          if (opponents.some(o => o.t2.group === th.t1.group && o.t2.standing === th.t1.standing)) break;\n          let group = j;\n          group += j > differ ? -Math.ceil(differ) : Math.floor(differ);\n          let standing = i - groupAdvance.current.value + 1;\n          if (j > differ) foo.t2 = {\n            group,\n            standing\n          };\n        }\n      }\n    }\n\n    const getOpponent = (groupId, advanceId) => {}; //Get an array of positions of round 2 that are already placed\n\n\n    const getRestMatches = (arr, restMatches, rounds) => {\n      let r = [];\n\n      if (arr === null) {\n        arr = [];\n\n        for (let i = 0; i < rounds; i++) {\n          arr.push(i);\n        }\n      }\n\n      let arr2 = arr.splice(arr.length / 2);\n      r.push(arr2[0]);\n      restMatches--;\n      if (restMatches > 0) r = [...r, ...getRestMatches(arr, Math.ceil(restMatches / 2))];\n      restMatches--;\n      if (restMatches > 0) r = [...r, ...getRestMatches(arr2, Math.floor(restMatches / 2))];\n      return r.sort((a, b) => a - b);\n    };\n\n    function* nextTeam_Generator() {\n      let i = -1;\n\n      while (true) {\n        var _teams$i;\n\n        i++;\n        yield teams === null || teams === void 0 ? void 0 : (_teams$i = teams[i]) === null || _teams$i === void 0 ? void 0 : _teams$i.name;\n      }\n    }\n\n    const nextTeam = nextTeam_Generator();\n    let rounds = getRounds(uBracketMatches_C);\n    let restMatches = getRestMatches(null, uBracketTeams_C - rounds[0] * 2, rounds[1]);\n    let toLinks;\n\n    const getNextToLink = () => {\n      let i = toLinks.findIndex(l => l < 2);\n      if (i < 0) throw Error('Oh uh, update ToLinks before fetching new!');\n      toLinks[i]++;\n      return i;\n    };\n\n    const updateToLinks = i => {\n      toLinks = new Array(rounds[i + 1]);\n      toLinks.fill(0);\n\n      if (i === 0) {\n        for (let i = 0; i < restMatches.length; i++) {\n          var _toLinks$v;\n\n          let v = restMatches[i];\n          toLinks[v] = ((_toLinks$v = toLinks[v]) !== null && _toLinks$v !== void 0 ? _toLinks$v : 0) + 1;\n        }\n\n        return;\n      }\n    };\n\n    console.log(`Teams in playoff: ${uBracketTeams_C}`);\n    console.log(`Total playoff matches: ${uBracketMatches_C}`);\n    console.log(\"Playoff Rounds: \", rounds);\n    console.log(\"restMatches: \", restMatches);\n    let upperBracket = [];\n    let groupId = groups.length;\n    let advanceId = groupAdvance === null || groupAdvance === void 0 ? void 0 : (_groupAdvance$current = groupAdvance.current) === null || _groupAdvance$current === void 0 ? void 0 : _groupAdvance$current.value;\n    let matchCount = 0; //Create the upper bracket\n\n    /*\r\n        Lower bracket skall insertas hälften så många nerifrån och upp.\r\n        Dvs första matchen blir loser of 1 & 2 andra 3 & 4.\r\n        Sen på runda 2 däremot (jämna) så vändar man på ordningen.\r\n    */\n\n    rounds.map((r, i) => {\n      upperBracket.push([]);\n      updateToLinks(i);\n\n      for (let j = 0; j < r; j++) {\n        matchCount++;\n        let toLink = getNextToLink();\n        let t1;\n        let t2; // Först rundan är bara att kötta på\n\n        if (i === 0) {\n          if (groupStage) {\n            t1 = {\n              group: groupId,\n              placement: advanceId\n            };\n            t2 = {\n              group: getOpponent(groupId, \"group\"),\n              placement: getOpponent(advanceId, \"placement\")\n            };\n          } else {\n            t1 = nextTeam.next().value;\n            t2 = nextTeam.next().value;\n          }\n        } // Runda två så gäller det att det är lag kvar, OCH att den finns i RestMatches-tabellen\n        else if (i === 1 && uBracketTeams_C > 0 && restMatches.includes(j)) {\n          let pre = upperBracket[0].findIndex(m => m.toLink === j);\n\n          if (groupStage) {\n            t1 = {\n              group: groupId,\n              placement: advanceId\n            };\n            if (pre === -1) t2 = {\n              group: getOpponent(groupId, \"group\"),\n              placement: getOpponent(advanceId, \"placement\")\n            };else t2 = `∀Winner of match ${upperBracket[0][pre].match}`;\n          } else {\n            t1 = nextTeam.next().value;\n            if (pre === -1) t2 = nextTeam.next().value;else t2 = `∀Winner of match ${upperBracket[0][pre].match}`;\n          }\n        } else {\n          let pre = upperBracket[i - 1].findIndex(m => m.toLink === j);\n          t1 = `∀Winner of match ${upperBracket[i - 1][pre].match}`;\n          pre = upperBracket[i - 1].findIndex((m, ii) => m.toLink === j && ii !== pre);\n          t2 = `∀Winner of match ${upperBracket[i - 1][pre].match}`;\n        }\n\n        if (i === 0 || i === 1 && uBracketTeams_C > 0 && restMatches.includes(j)) {\n          groupId -= 1;\n          advanceId -= 1;\n          uBracketTeams_C -= i + Math.abs(2 * (i - 1));\n          if (advanceId === 0) advanceId += groups.length;\n          if (groupId === 0) groupId += groups.length;\n        }\n\n        upperBracket[i].push({\n          \"name\": \"Match \" + matchCount,\n          \"bo\": 3,\n          \"gameResults\": [undefined, undefined, undefined],\n          \"winner\": undefined,\n          \"team1\": t1,\n          \"team2\": t2,\n          \"round\": i,\n          \"roundId\": j,\n          \"match\": matchCount,\n          \"toLink\": toLink\n        });\n        uBracketMatches_C--;\n      }\n    });\n    console.log(\"upperBracket:\", upperBracket);\n    console.log(\"matches:\", matches);\n    let lowerBracket = []; // Loser's Bracket\n\n    if (eliminitationType === 2) {\n      lowerBracket.push([]);\n      rounds.map((r, i) => {\n        for (let j = 0; j < r / 2; j++) {\n          matchCount++;\n          lowerBracket[i].push({\n            \"name\": \"Match \" + matchCount,\n            \"bo\": 3,\n            \"gameResults\": [undefined, undefined, undefined],\n            \"winner\": undefined,\n            \"team1\": {\n              match: j\n            },\n            \"team2\": {\n              match: j + 1\n            },\n            \"round\": i,\n            \"roundId\": j,\n            \"match\": matchCount,\n            \"fromLink\": undefined\n          });\n        }\n      });\n    }\n\n    navigate(\"/skrallgaming/Thornament\", {\n      state: {\n        groups,\n        upperBracket,\n        teams,\n        groupMatches: matches\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CreateThornamentBody\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"part\",\n            children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n              children: \"Tournament Info\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"tournamentName\",\n                required: true,\n                ref: tournamentName,\n                defaultValue: 'SSE-II 2022 Smash Doubles'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Tournament Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"gameFormat\",\n                ref: gameFormat,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"1v1\",\n                  children: \"1v1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"2v2\",\n                  children: \"2v2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Game Format\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"game\",\n                ref: game,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"smash\",\n                  children: \"Smash Ultimate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"beerPong\",\n                  children: \"Beerpong\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Game\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: \"groupStage\",\n                checked: groupStage,\n                onChange: () => setGroupStage(!groupStage)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"groupStage\",\n                children: \"Groupstage?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 25\n            }, this), groupStage && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"inputBox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  id: \"maxTeamsPerGrp\",\n                  defaultValue: 4,\n                  ref: groupMaxTeams\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Max teams per group\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 383,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"inputBox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  id: \"advance\",\n                  defaultValue: 2,\n                  ref: groupAdvance,\n                  min: 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Teams advance from each group\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                required: true,\n                id: \"eliminitationType\",\n                ref: eliminitationType,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: 1,\n                  children: \"Single Elimination\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: 2,\n                  children: \"Double Elimination\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Elimination type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: \"eloStructure\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"eloStructure\",\n                children: \"Structure by Elo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"part\",\n            children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n              children: \"Team Registration\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"p1\",\n                defaultValue: \"\",\n                ref: p1,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  disabled: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 33\n                }, this), players && players.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p === null || p === void 0 ? void 0 : p.name,\n                  children: p === null || p === void 0 ? void 0 : p.name\n                }, \"1\" + (p === null || p === void 0 ? void 0 : p.name), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 54\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Player 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"p2\",\n                defaultValue: \"\",\n                ref: p2,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  disabled: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 33\n                }, this), players && players.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p === null || p === void 0 ? void 0 : p.name,\n                  children: p === null || p === void 0 ? void 0 : p.name\n                }, \"2\" + (p === null || p === void 0 ? void 0 : p.name), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 421,\n                  columnNumber: 54\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Player 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"teamName\",\n                required: true,\n                ref: teamName,\n                onKeyDown: k => {\n                  if (k.key === \"Enter\") registerTeam();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Team name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => registerTeam(),\n              children: \"Register Team\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n              children: \"Registered Teams\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"registeredTeams\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 441,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Team\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 442,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Players\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 443,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 440,\n                  columnNumber: 36\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: teams && teams.map((t, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: i + 1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 448,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: t.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: t.players.join(' & ')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 450,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      onClick: () => removeTeam(i),\n                      children: \"\\u274C\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 451,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 451,\n                    columnNumber: 41\n                  }, this)]\n                }, t.name, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 57\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }, this), teams && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"finishButton\",\n        onClick: () => startThornament(),\n        children: \"Hold to start Thornament\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(CreateThornament, \"FCDEC5n6gCAkkC2defeDpEWsqOQ=\", false, function () {\n  return [usePlayers, useNavigate];\n});\n\n_c = CreateThornament;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateThornament\");","map":{"version":3,"names":["React","useState","useRef","useNavigate","usePlayers","playersArray","CreateThornament","players","setPlayers","teams","setTeams","name","navigate","tournamentName","gameFormat","game","groupStage","setGroupStage","groupMaxTeams","groupAdvance","eliminitationType","teamName","p1","p2","lenght","registerTeam","current","value","arr","push","select","removeTeam","i","splice","startThornament","console","clear","alert","matches","uBracketMatches_C","length","uBracketTeams_C","groups","Array","Math","ceil","groupId","log","map","group","team","j","k","String","fromCharCode","undefined","getRounds","int","ret","rm","pow","unshift","op","adv","from","_","opponents","gl","differ","breakPoint","cur","breaker","standing","shift","offset","pointer","floor","m","t1","t2","th","some","o","foo","getOpponent","advanceId","getRestMatches","restMatches","rounds","r","arr2","sort","a","b","nextTeam_Generator","nextTeam","toLinks","getNextToLink","findIndex","l","Error","updateToLinks","fill","v","upperBracket","matchCount","toLink","placement","next","includes","pre","match","ii","abs","lowerBracket","state","groupMatches","p","key","t","join"],"sources":["C:/Git/SkrallGames/client/src/pages/skrallgaming/createThornament.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n//import { Radar } from \"react-chartjs-2\";\r\nimport usePlayers from \"../../hooks/skrallgaming/usePlayers\";\r\nimport playersArray from \"../../globals/skrallgaming/players\"\r\n//import placings from \"../../globals/skrallgaming/placings\"\r\nimport \"../../assets/style/skrallgaming/createThornament.css\"\r\n\r\nexport default function CreateThornament(){\r\n\r\n    const { players, setPlayers } = usePlayers()\r\n    const [ teams, setTeams ] = useState([\r\n        {name: \"Fizzle My Nizzle\", players: [\"Mikka\", \"Mangz\"]},\r\n        {name: \"Damöb\", players: [\"Izizaki\", \"Frudrunq\"]},\r\n        {name: \"Team Moskva\", players: [\"a\", \"b\"]},\r\n        {name: \"Feta pattar och hawaii pizza\", players: [\"a\", \"b\"]},\r\n        {name: \"Bratwurst med lis\", players: [\"a\", \"b\"]},\r\n        {name: \"B-Boyz\", players: [\"a\", \"b\"]},\r\n        {name: \"Det står still\", players: [\"a\", \"b\"]},\r\n        {name: \"Oklart\", players: [\"a\", \"b\"]},\r\n        {name: \"Sneakers Sluts\", players: [\"a\", \"b\"]},\r\n        {name: \"Holk & Kir\", players: [\"a\", \"b\"]}\r\n    ])\r\n    const navigate = useNavigate();\r\n\r\n    const tournamentName = useRef()\r\n    const gameFormat = useRef()\r\n    const game = useRef('smash')\r\n\r\n    const [ groupStage, setGroupStage ] = useState(false)\r\n    const groupMaxTeams  = useRef()\r\n    const groupAdvance = useRef()\r\n\r\n    const eliminitationType = useRef()\r\n\r\n    const teamName = useRef()\r\n    const p1 = useRef()\r\n    const p2 = useRef()\r\n\r\n    useState(() => {if (!players?.lenght) setPlayers(playersArray)}, [])\r\n\r\n    const registerTeam = () =>{\r\n        if (!p1.current.value || !p2.current.value || !teamName.current.value) return\r\n        let arr = [...[], ...teams]\r\n        arr.push({\r\n            name: teamName.current.value,\r\n            players: [p1.current.value, p2.current.value]\r\n        })\r\n        setTeams(arr);\r\n        teamName.current.select();\r\n    }\r\n\r\n    const removeTeam = (i) => {\r\n        let arr = [...[], ...teams]\r\n        arr.splice(i, 1)\r\n        setTeams(arr)\r\n    }    \r\n\r\n    const startThornament = () => {\r\n        console.clear()\r\n        if (!teams) return alert(\"Register teams first!\")\r\n        let matches = []\r\n        let uBracketMatches_C = (teams.length - 1)\r\n        let uBracketTeams_C = teams.length;\r\n        let groups = []\r\n\r\n        //Create all group matches\r\n        if (groupStage){\r\n            groups = Array(Math.ceil(teams.length / groupMaxTeams.current.value))\r\n            let groupId = 0\r\n            for (let i = 0; i < teams.length; i++){\r\n                if (!groups[groupId]) groups[groupId] = []\r\n                groups[groupId] = [...groups?.[groupId], teams[i]]\r\n                groupId++\r\n                if (groupId === groups.length) groupId = 0\r\n            }\r\n            console.log(\"Groups:\", groups)\r\n\r\n            groups.map((group, i) => {\r\n                group.map((team, j) => {\r\n                    for(let k = j+1; k < group.length; k++){\r\n                        matches.push({\r\n                            \"group\": String.fromCharCode(65+i),\r\n                            \"winner\": undefined,\r\n                            \"name\": \"Pool\",\r\n                            \"bo\": 2,\r\n                            \"gameResults\": [undefined, undefined],\r\n                            \"team1\": group[j].name,\r\n                            \"team2\": group[k].name,\r\n                        })\r\n                    }\r\n                })                \r\n            })\r\n            uBracketTeams_C = (groupAdvance.current.value * groups.length)\r\n            uBracketMatches_C = uBracketTeams_C - 1\r\n        }\r\n\r\n        //get array of matches per round\r\n        const getRounds = (int) => {            \r\n            if (typeof int !== \"number\") return\r\n            let i = 0\r\n            let ret = [];\r\n            \r\n            while (int > 0){\r\n                let rm = Math.pow(2, i)\r\n                if (int >= rm) ret.unshift(rm)\r\n                else ret.unshift(int)\r\n                int -= rm\r\n                i++                \r\n            }\r\n\r\n            return ret\r\n        }\r\n        \r\n        //get opposite opponent if id        \r\n        let op = []\r\n        {\r\n            const adv = () => Array.from({length: groupAdvance.current.value}, (_, i) => i + 1)\r\n            let opponents = Array.from({length:groups.length}, adv)\r\n            // opponents[0] = [...[], ...adv] //Annoying deep-copy shit\r\n            // opponents.fill(adv, 1)\r\n            let gl = groups.length\r\n            let differ = groups.length / 2;\r\n            let breakPoint = {cur: 0, breaker: gl * groupAdvance.current.value} \r\n            \r\n            // if there is an uneven amount ov advanced players, one will have a free ride.\r\n            if (gl * groupAdvance.current.value % 2 === 1){ \r\n                op.push({group: 0, standing: 1})\r\n                opponents[0].shift();\r\n                breakPoint.breaker--;\r\n            }\r\n            // Break after half games\r\n            breakPoint.breaker /= 2;\r\n            let offset = op.length\r\n            for(let i = groupAdvance.current.value; i > 0; i--){ // 4th -> 3rd -> 2nd etc..\r\n                \r\n                if (breakPoint.breaker === breakPoint.cur) break;\r\n                \r\n                for (let j = 0; j < groups.length; j++){ // All Groups\r\n                    let pointer = (j + offset) % groups.length\r\n                    if (breakPoint.breaker === breakPoint.cur) break;\r\n                    let group = pointer\r\n                    group += pointer > differ ? - Math.ceil(differ) : Math.floor(differ);\r\n                    let m = {\r\n                        t1: {group: pointer, standing: i},\r\n                        t2: {group, standing: opponents[group][0]}\r\n                    }\r\n                    op.push(m)\r\n                    opponents[group].shift()\r\n                    breakPoint.cur++\r\n                }\r\n            }\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            \r\n            \r\n\r\n\r\n            for(let i = groupAdvance.current.value; i > 0 ; i--){ // Alla \"treor\" -> \"tvåor\" -> \"ettor\" etc\r\n                for(let j = 0; j < gl; j++){ // Alla grupper\r\n                    let th = {t1: {group: j, standing: i}}\r\n                    if (opponents.some(o => o.t2.group === th.t1.group && o.t2.standing === th.t1.standing))\r\n                        break;\r\n                    let group = j\r\n                    group += j > differ ? - Math.ceil(differ) : Math.floor(differ);\r\n                    let standing = i - groupAdvance.current.value + 1\r\n                    if (j > differ) foo.t2 = {group, standing}\r\n                }\r\n            }\r\n        }\r\n\r\n        const getOpponent = (groupId, advanceId) => {\r\n            \r\n        }        \r\n\r\n        //Get an array of positions of round 2 that are already placed\r\n        const getRestMatches = (arr, restMatches, rounds) => {\r\n            let r = [];\r\n            if (arr === null){                \r\n                arr = [];\r\n                for(let i = 0; i < rounds; i++){\r\n                    arr.push(i);\r\n                }\r\n            }\r\n            let arr2 = arr.splice(arr.length / 2)\r\n            r.push(arr2[0])\r\n            restMatches--\r\n            if(restMatches > 0)\r\n                r = [...r, ...getRestMatches(arr, Math.ceil(restMatches/2))]\r\n            restMatches--\r\n            if(restMatches > 0)\r\n                r = [...r, ...getRestMatches(arr2, Math.floor(restMatches/2))]\r\n            \r\n            return r.sort((a, b) => a - b);\r\n        }\r\n\r\n        function* nextTeam_Generator(){\r\n            let i = -1            \r\n            while(true){\r\n                i++\r\n                yield teams?.[i]?.name\r\n            }            \r\n        }\r\n\r\n        const nextTeam = nextTeam_Generator()\r\n\r\n        let rounds = getRounds(uBracketMatches_C)                \r\n        let restMatches = getRestMatches(null, uBracketTeams_C - rounds[0]*2, rounds[1])\r\n        let toLinks;\r\n        const getNextToLink = () => {\r\n            let i = toLinks.findIndex(l => l < 2)\r\n            if(i < 0) throw Error('Oh uh, update ToLinks before fetching new!')\r\n            toLinks[i]++\r\n            return i;\r\n        }\r\n        const updateToLinks = (i) => {\r\n            toLinks = new Array(rounds[i+1])\r\n            toLinks.fill(0);\r\n            if (i === 0){                \r\n                for (let i = 0; i < restMatches.length; i++){\r\n                    let v = restMatches[i]\r\n                    toLinks[v] = (toLinks[v] ?? 0) + 1;\r\n                }\r\n                return\r\n            }            \r\n        }\r\n\r\n        console.log(`Teams in playoff: ${uBracketTeams_C}`)\r\n        console.log(`Total playoff matches: ${uBracketMatches_C}`)\r\n        console.log(\"Playoff Rounds: \", rounds)\r\n        console.log(\"restMatches: \", restMatches)      \r\n\r\n        let upperBracket = []\r\n        let groupId = groups.length\r\n        let advanceId = groupAdvance?.current?.value\r\n        let matchCount = 0;\r\n        //Create the upper bracket\r\n        /*\r\n            Lower bracket skall insertas hälften så många nerifrån och upp.\r\n            Dvs första matchen blir loser of 1 & 2 andra 3 & 4.\r\n            Sen på runda 2 däremot (jämna) så vändar man på ordningen.\r\n        */\r\n        rounds.map((r, i) => {\r\n            upperBracket.push([])\r\n            updateToLinks(i);\r\n            for(let j = 0; j < r; j++){\r\n                matchCount++\r\n                let toLink = getNextToLink()\r\n                let t1\r\n                let t2;\r\n\r\n                // Först rundan är bara att kötta på\r\n                if(i === 0){\r\n                    if (groupStage){\r\n                        t1 = {group: groupId, placement: advanceId}\r\n                        t2 = {group: getOpponent(groupId, \"group\"), placement: getOpponent(advanceId, \"placement\")}\r\n                    }else{\r\n                        t1 = nextTeam.next().value\r\n                        t2 = nextTeam.next().value\r\n                    }\r\n                }                                           \r\n\r\n                // Runda två så gäller det att det är lag kvar, OCH att den finns i RestMatches-tabellen\r\n                else if (i === 1 && uBracketTeams_C > 0 && restMatches.includes(j)){\r\n                    let pre = upperBracket[0].findIndex(m => m.toLink === j)\r\n                    if (groupStage){\r\n                        t1 = {group: groupId, placement: advanceId}\r\n                        if (pre === -1) t2 = {group: getOpponent(groupId, \"group\"), placement: getOpponent(advanceId, \"placement\")}\r\n                        else t2 = `∀Winner of match ${upperBracket[0][pre].match}`\r\n                    }else{\r\n                        t1 = nextTeam.next().value\r\n                        if (pre === -1) t2 = nextTeam.next().value\r\n                        else t2 = `∀Winner of match ${upperBracket[0][pre].match}`\r\n                    }\r\n                }else{\r\n                    let pre = upperBracket[i-1].findIndex(m => m.toLink === j)\r\n                    t1 = `∀Winner of match ${upperBracket[i-1][pre].match}`\r\n                    pre = upperBracket[i-1].findIndex((m, ii) => m.toLink === j && ii !== pre)\r\n                    t2 = `∀Winner of match ${upperBracket[i-1][pre].match}`\r\n                }\r\n                \r\n                if (i === 0 || (i === 1 && uBracketTeams_C > 0 && restMatches.includes(j))){\r\n                    groupId -= 1\r\n                    advanceId -= 1\r\n                    uBracketTeams_C -= i + Math.abs(2*(i-1));\r\n                    if (advanceId === 0) advanceId += groups.length\r\n                    if (groupId === 0) groupId += groups.length\r\n                }\r\n\r\n                upperBracket[i].push({\r\n                    \"name\": \"Match \" + matchCount,\r\n                    \"bo\": 3,\r\n                    \"gameResults\": [undefined, undefined, undefined],\r\n                    \"winner\": undefined,\r\n                    \"team1\": t1,\r\n                    \"team2\": t2,\r\n                    \"round\": i,\r\n                    \"roundId\": j,\r\n                    \"match\": matchCount,\r\n                    \"toLink\": toLink\r\n                })\r\n                uBracketMatches_C--;                \r\n            }\r\n        })\r\n        console.log(\"upperBracket:\", upperBracket)\r\n        console.log(\"matches:\", matches)\r\n\r\n\r\n        let lowerBracket = [];        \r\n        // Loser's Bracket\r\n        if (eliminitationType === 2){\r\n            lowerBracket.push([])\r\n            rounds.map((r, i) => {\r\n                for (let j = 0; j < r/2; j++){\r\n                    matchCount++\r\n                    lowerBracket[i].push({\r\n                        \"name\": \"Match \" + matchCount,\r\n                        \"bo\": 3,\r\n                        \"gameResults\": [undefined, undefined, undefined],\r\n                        \"winner\": undefined,\r\n                        \"team1\": {match: j},\r\n                        \"team2\": {match: j+1},\r\n                        \"round\": i,\r\n                        \"roundId\": j,\r\n                        \"match\": matchCount,\r\n                        \"fromLink\": undefined\r\n                    }) \r\n                }\r\n            })\r\n        }            \r\n\r\n        navigate(\"/skrallgaming/Thornament\", {state:{\r\n            groups,\r\n            upperBracket,\r\n            teams,\r\n            groupMatches: matches\r\n        }})\r\n    }\r\n\r\n    return <>        \r\n        <div className=\"CreateThornamentBody\">\r\n            <div>                \r\n                <span>\r\n                    <fieldset className=\"part\">\r\n                        <legend>Tournament Info</legend>\r\n                        <div className=\"inputBox\">\r\n                            <input id=\"tournamentName\" required \r\n                                ref={tournamentName} defaultValue={'SSE-II 2022 Smash Doubles'}\r\n                            /> \r\n                            <span>Tournament Name</span>\r\n                        </div>\r\n                        <div className=\"inputBox\">\r\n                            <select id=\"gameFormat\" ref={gameFormat}>\r\n                                <option value=\"1v1\">1v1</option>\r\n                                <option value=\"2v2\">2v2</option>\r\n                            </select>\r\n                            <span>Game Format</span>\r\n                        </div>\r\n                        <div className=\"inputBox\">\r\n                            <select id=\"game\" ref={game}>\r\n                                <option value=\"smash\">Smash Ultimate</option>\r\n                                <option value=\"beerPong\">Beerpong</option>\r\n                            </select>\r\n                            <span>Game</span>\r\n                        </div>                    \r\n                        <div>\r\n                            <input type=\"checkbox\" id=\"groupStage\" checked={groupStage}\r\n                                onChange={() => setGroupStage(!groupStage)}\r\n                            />\r\n                            <label htmlFor=\"groupStage\">Groupstage?</label>\r\n                        </div>                    \r\n                        {groupStage && <>\r\n                            <div className=\"inputBox\">\r\n                                <input type=\"number\" id=\"maxTeamsPerGrp\" defaultValue={4} ref={groupMaxTeams}/> \r\n                                <span>Max teams per group</span>\r\n                            </div>\r\n                            <div className=\"inputBox\">\r\n                                <input type=\"number\" id=\"advance\" defaultValue={2} \r\n                                    ref={groupAdvance} min={1} \r\n                                /> \r\n                                <span>Teams advance from each group</span>\r\n                            </div>\r\n                        </>} \r\n                        <div className=\"inputBox\">\r\n                            <select required id=\"eliminitationType\" ref={eliminitationType}>\r\n                                <option value={1}>Single Elimination</option>\r\n                                <option value={2}>Double Elimination</option>\r\n                            </select>\r\n                            <span>Elimination type</span>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"checkbox\" id=\"eloStructure\"/>\r\n                            <label htmlFor=\"eloStructure\">Structure by Elo</label>\r\n                        </div>                    \r\n                    </fieldset>\r\n                </span>\r\n                <span>\r\n                    <fieldset className=\"part\">\r\n                        <legend>Team Registration</legend>                                            \r\n                        <div className=\"inputBox\">\r\n                            <select id=\"p1\" defaultValue={\"\"} ref={p1}>\r\n                                <option value=\"\" disabled/>\r\n                                {players &&\r\n                                    players.map(p => <option key={\"1\"+p?.name} value={p?.name}>{p?.name}</option>)\r\n                                }\r\n                            </select>\r\n                            <span>Player 1</span>\r\n                        </div>\r\n                        <div className=\"inputBox\">\r\n                            <select id=\"p2\" defaultValue={\"\"} ref={p2}>\r\n                                <option value=\"\" disabled/>\r\n                                {players &&\r\n                                    players.map(p => <option key={\"2\"+p?.name} value={p?.name}>{p?.name}</option>)\r\n                                }\r\n                            </select>\r\n                            <span>Player 2</span>\r\n                        </div>\r\n                        <div className=\"inputBox\">\r\n                            <input id=\"teamName\" required \r\n                                ref={teamName}\r\n                                onKeyDown={(k) => {if(k.key === \"Enter\") registerTeam()}} \r\n                            /> \r\n                            <span>Team name</span>\r\n                        </div>\r\n                        <button onClick={() => registerTeam()}>Register Team</button>\r\n                    </fieldset>\r\n                </span>\r\n                <span>\r\n                    <fieldset>\r\n                        <legend>Registered Teams</legend>\r\n                        <table className=\"registeredTeams\">\r\n                            <thead><tr>\r\n                                <th></th>\r\n                                <th>Team</th>\r\n                                <th>Players</th>\r\n                            </tr></thead>\r\n                            <tbody>\r\n                                {teams &&\r\n                                    teams.map((t, i) => <tr key={t.name}>\r\n                                        <td>{i+1}</td>\r\n                                        <td>{t.name}</td>\r\n                                        <td>{t.players.join(' & ')}</td>\r\n                                        <td><i onClick={() => removeTeam(i)}>❌</i></td>\r\n                                    </tr>)\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </fieldset>\r\n                </span>\r\n            </div>            \r\n            {\r\n                teams &&\r\n                <div className=\"finishButton\" onClick={() => startThornament()}>Hold to start Thornament</div>\r\n            }\r\n        </div>    \r\n    </>\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}